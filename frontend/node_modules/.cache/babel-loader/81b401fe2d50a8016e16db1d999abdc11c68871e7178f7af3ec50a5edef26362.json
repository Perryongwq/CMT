{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programming\\\\_CMT\\\\frontend\\\\src\\\\components\\\\uploadcon\\\\Uploadcon.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Uploadcon = () => {\n  _s();\n  const [trainingDataset, setTrainingDataset] = useState(null);\n  const [validationDataset, setValidationDataset] = useState(null);\n  const [message, setMessage] = useState(null);\n  const handleTrainingDatasetUpload = event => {\n    const file = event.target.files[0];\n    if (file.type !== 'application/zip') {\n      sertMessage('Invalid File Type! Please upload a zip file.');\n      return;\n    }\n    setTrainingDataset(file);\n  };\n  const handleValidationDatasetUpload = event => {\n    const file = event.target.files[0];\n    setValidationDataset(file);\n  };\n  const handleSubmit = () => {\n    if (!trainingDataset || !validationDataset) {\n      setMessage('Please upload both training and validation datasets!');\n      return;\n    }\n    // Perform actions with the uploaded datasets\n    console.log('Training Dataset:', trainingDataset);\n    console.log('Validation Dataset:', validationDataset);\n    setMessage('Datasets Upload successful!');\n  };\n  const handleReset = () => {\n    setTrainingDataset(null);\n    setValidationDataset(null);\n    setMessage('Clearing datasets...');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Training and Validation Datasets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".zip\",\n      onChange: handleTrainingDatasetUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".zip\",\n      onChange: handleValidationDatasetUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), \" \", message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Uploadcon, \"f54mp4oWWMH8UKDmlXfLJcB96Es=\");\n_c = Uploadcon;\nexport default Uploadcon;\nvar _c;\n$RefreshReg$(_c, \"Uploadcon\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Uploadcon","_s","trainingDataset","setTrainingDataset","validationDataset","setValidationDataset","message","setMessage","handleTrainingDatasetUpload","event","file","target","files","type","sertMessage","handleValidationDatasetUpload","handleSubmit","console","log","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Programming/_CMT/frontend/src/components/uploadcon/Uploadcon.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Uploadcon = () => {\r\n    const [trainingDataset, setTrainingDataset] = useState(null);\r\n    const [validationDataset, setValidationDataset] = useState(null);\r\n    const [message, setMessage] = useState(null);\r\n\r\n    const handleTrainingDatasetUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file.type !== 'application/zip') {\r\n            sertMessage('Invalid File Type! Please upload a zip file.');\r\n            return;\r\n        }\r\n        setTrainingDataset(file);\r\n    };\r\n\r\n    const handleValidationDatasetUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        setValidationDataset(file);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        if (!trainingDataset || !validationDataset) {\r\n            setMessage('Please upload both training and validation datasets!');\r\n            return;\r\n        }\r\n        // Perform actions with the uploaded datasets\r\n        console.log('Training Dataset:', trainingDataset);\r\n        console.log('Validation Dataset:', validationDataset);\r\n\r\n        setMessage('Datasets Upload successful!');\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setTrainingDataset(null);\r\n        setValidationDataset(null);\r\n        setMessage('Clearing datasets...');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Upload Training and Validation Datasets</h1>\r\n            <input type=\"file\" accept=\".zip\" onChange={handleTrainingDatasetUpload} />\r\n            <input type=\"file\" accept=\".zip\" onChange={handleValidationDatasetUpload} />\r\n            <button onClick={handleSubmit}>Upload</button>\r\n            <button onClick={handleReset}>Reset</button> {/* Reset the datasets */}\r\n            {message && <p>{message}</p>} {/* Display message if not null */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Uploadcon;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}